plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "application"
}

apply from: "${project.rootDir}/maven-publisher.gradle"

sourceSets{
    examples {
        resources { srcDirs "src/examples/resources" }
        java {
            srcDirs 'src/examples/kotlin', 'src/examples/java'
            compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
        }
    }
}

dependencies {
    compileOnly DEFAULT
    implementation project(':modules:core')

    compileOnly "org.lwjgl.lwjgl:lwjgl:${project["version.lwjgl2"]}"

    implementation files("${project.projectDir}/include/javafx.graphics.win-es2.jar")
}

tasks.register('runLWJGL2', JavaExec) {
    group = "Execution"
    description = "Run the example class with LWJGL2"
    classpath = sourceSets.examples.runtimeClasspath
    mainClass = "LWJGL2Kt"
    jvmArgs project["opens"].split()
}

tasks.register('runLWJGL2_D3D', JavaExec) {
    group = "Execution"
    description = "Run the example class with LWJGL2 D3D"
    classpath = sourceSets.examples.runtimeClasspath
    mainClass = "LWJGL2_D3DKt"
    jvmArgs project["opens"].split()
}

tasks.register('runLWJGL2_SW', JavaExec) {
    group = "Execution"
    description = "Run the example class with LWJGL2 SW"
    classpath = sourceSets.examples.runtimeClasspath
    mainClass = "LWJGL2_SWKt"
    jvmArgs project["opens"].split()
}

tasks.register('runLWJGL2_ES2', JavaExec) {
    group = "Execution"
    description = "Run the example class with LWJGL2 ES2"
    classpath = sourceSets.examples.runtimeClasspath
    mainClass = "LWJGL2_ES2Kt"
    jvmArgs project["opens"].split()
}

task fatJarSW(type: Jar) {
    manifest {
        attributes 'Main-Class': 'LWJGL2_SWKt'
    }
    archiveBaseName = 'SW'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { sourceSets.examples.runtimeClasspath.filter { file -> file.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task fatJarES(type: Jar) {
    manifest {
        attributes 'Main-Class': 'LWJGL2_ES2Kt'
    }
    archiveBaseName = 'ES'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { sourceSets.examples.runtimeClasspath.filter { file -> file.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(Copy) {
    duplicatesStrategy = 'exclude'
}